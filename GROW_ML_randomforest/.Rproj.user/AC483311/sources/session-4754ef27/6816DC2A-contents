## ---------------------------
##
## Script: GROW_ML_randomforest_diversity
##
## Purpose: train random forest model to predict function from landuse
##
## Author: Ikaia Leleiwi
##
## Date Created: May 23rd 2023
##
## Copyright (c) Ikaia Leleiwi, 2023
## Email: ileleiwi@gmail.com
##
## ---------------------------
##
## Notes: good r^2's for richness but bad r^2's for shannons's
##   
##
## ---------------------------

## set working directory

setwd(paste0("/Users/ikaialeleiwi/Desktop/Lab/GROW_ML"))

## ---------------------------

##Libraries

library(tidyverse)
library(caret)
library(pROC)
library(ranger) #importance_pvalues
set.seed(123)

##Data

target_col <- c("MAGRichness","MAGShannons","GeneRichness","GeneShannons")
df <- read_csv("data/metat_metag.csv") %>%
  select(target_col[3], starts_with("Pct"), DamDensWs, PopDen2010Ws) %>%
  rename("target" = target_col[3])



#check for all 0's or sparce (only 1)
df_clean <- df %>%
  select(where(~ any(. !=0 ))) %>% #remove columns with all 0's and all FALSE
  select(where(~ any(. !=1 ))) %>%
  mutate_all(function(x) x + 1e-9) %>% #add pseudocount
  mutate_all(log10) #log transform
  

#look at data
plot_hist <- function(var, name){
  
  ggplot(df_clean, aes(x = (var))) +
    geom_histogram(bins = 100) +
    labs(x = name,
         title = name)
  
}

hist_list <- df_clean %>%
  select_if(is.numeric) %>%
  map2(.y = names(.),
       ~plot_hist(.x, .y)) 

map(hist_list, ~print(.x))


#split data
training_partition <- df_clean$target %>%
  createDataPartition(p=0.75, list = FALSE)

train <- df_clean[training_partition,]
test <- df_clean[-training_partition,]

#resampling method
fit_control <- trainControl(## 10-fold CV
  method = "cv",
  number = 10,
  search = 'grid', 
  savePredictions = TRUE)

#tuning paramaters
rang_grid <- expand.grid(mtry = seq(2,8,2),
                         splitrule = c("variance", "extratrees", "maxstat"),
                         min.node.size = c(1, 3, 5, 6))

rf_grid <- expand.grid(.mtry = c(sqrt(ncol(df_clean))))

#fit a random forest model (using ranger)
rang_fit <- train(target ~ .,
                  data = train,
                  method = "ranger",
                  trControl = fit_control,
                  tuneGrid = rang_grid,
                  importance = 'impurity',
                  metric = "Rsquared")

rang_fit


# predict the outcome on a test set
rang_pred <- predict(rang_fit, test)

plot(test$target ~ rang_pred)

#metrics
d <- test$target - rang_pred
mse = mean((d)^2)
mae = mean(abs(d))
rmse = sqrt(mse)
R2 = 1-(sum((d)^2)/sum((test$target-mean(test$target))^2))
cat(" MAE:", mae, "\n", "MSE:", mse, "\n", 
    "RMSE:", rmse, "\n", "R-squared:", R2)

#variable importances
#Conditional=True, adjusts for correlations between predictors.
i_scores <- varImp(rang_fit, conditional=TRUE, scale = FALSE)

#Gathering rownames in 'var'  and converting it to the factor
i_scores_p <- i_scores$importance %>% 
  rownames_to_column("var") 

scores_levels <- i_scores_p %>%
  arrange(Overall) %>%
  pull(var) %>%
  unique()

i_scores_p <- i_scores_p %>%
  mutate(var = factor(var, levels = scores_levels))

#Plotting the bar and polar charts for comparing variables

#run script with target_col == "GeneRichness"
svg("figures/rf_generichness_varimp.svg", height = 10, width = 10)
i_scores_p %>%
  ggplot(aes(x = var, y = Overall)) +
  geom_bar(stat = "identity") +
  geom_label(aes(label = paste(" MAE:", round(mae,3),
                               "\n", "MSE:", round(mse, 3),
                               "\n", "RMSE:", round(rmse, 3),
                               "\n", "R-squared:", round(R2, 3)),
           x = 10,
           y = 1.75)) +
  labs(title = "Variable Importances to\nPredict Gene Richness") +
  coord_flip()
dev.off()

# #run script with target_col == "MAGRichness"
# svg("figures/rf_MAGrichness_varimp.svg", height = 10, width = 10)
# i_scores_p %>%
#   ggplot(aes(x = var, y = Overall)) +
#   geom_bar(stat = "identity")  +
#   geom_label(aes(label = paste(" MAE:", round(mae,3), 
#                                "\n", "MSE:", round(mse, 3), 
#                                "\n", "RMSE:", round(rmse, 3), 
#                                "\n", "R-squared:", round(R2, 3)),
#                  x = 10,
#                  y = 0.4)) +
#   labs(title = "Variable Importances to\nPredict MAG Richness") +
#   coord_flip()
# dev.off()
